apiVersion: apps/v1 
kind: Deployment
metadata:
  name: redis-master
  labels:
    app: redis
  namespace: staging
spec:
  selector:
    matchLabels:
      app: redis
      role: master
      tier: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
        role: master
        tier: backend
    spec:
      containers:
      - name: master
        image: k8s.gcr.io/redis:e2e  # or just image: redis
        resources:
          limits:
            cpu: 150m
            memory: 400Mi
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 6379

---

apiVersion: v1
kind: Service
metadata:
  name: redis-master
  labels:
    app: redis
    role: master
    tier: backend
  namespace: staging
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis
    role: master
    tier: backend

---

apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: redis-slave
  labels:
    app: redis
  namespace: staging
spec:
  selector:
    matchLabels:
      app: redis
      role: slave
      tier: backend
  replicas: 2
  template:
    metadata:
      labels:
        app: redis
        role: slave
        tier: backend
    spec:
      containers:
      - name: slave
        image: gcr.io/google_samples/gb-redisslave:v1
        resources:
          limits:
            cpu: 150m
            memory: 400Mi
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
        - name: LOAD
          value: dd if=/dev/zero of=/dev/null bs=100M count=1000
        ports:
        - containerPort: 6379

---

apiVersion: v1
kind: Service
metadata:
  name: redis-slave
  labels:
    app: redis
    role: slave
    tier: backend
  namespace: staging
spec:
  ports:
  - port: 6379
  selector:
    app: redis
    role: slave
    tier: backend

---

apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: frontend
  labels:
    app: guestbook
  namespace: staging
spec:
  selector:
    matchLabels:
      app: guestbook
      tier: frontend
  replicas: 3
  template:
    metadata:
      labels:
        app: guestbook
        tier: frontend
    spec:
      containers:
      - name: php-redis
        image: gcr.io/google-samples/gb-frontend:v4
        resources:
          limits:
            cpu: 150m
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        - name: GET_HOSTS_FROM
          value: dns
        - name: LOAD
          value: "dd if=/dev/zero of=/dev/null bs=100M count=1000"
        ports:
        - containerPort: 80

---

apiVersion: v1
kind: Service
metadata:
  name: staging-guestbook-service
  labels:
    app: guestbook
    tier: frontend
  namespace: staging
spec:
  ports:
  - port: 80
  selector:
    app: guestbook
    tier: frontend

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ingress-frontend-staging
  annotations:
    kubernetes.io/ingress.class: "nginx"
  namespace: staging
spec:
  rules:
  - host: staging-guestbook.mstakx.io
    http:
      paths:
      - backend:
          serviceName: staging-guestbook-service
          servicePort: 80

